#!/user/bin/env bash

#
# Part of the JTSDK-NIX Project
# Build Python Pmw-2.0.0 from source

#--------------------------------pmw build-------------------------------------#

# NOTE: the download pulls the PyPi compliant version of Pmw, and includes
# both Pmw-2.0.0 and Pmw-1.3.3. WSJT projects use Python3, as such, Pmw-2.0.0
# is required.

function build_pmw() {

set -e

_PKG_NAME=pmw2
_FILE=Pmw-2.0.0.tar.gz
_URL="http://softlayer-dal.dl.sourceforge.net/project/pmw/Pmw-2.0.0.tar.gz"
_MD5A="c7c3f26c4f5abaa99807edefee578fc0"
_INSTALL_MKR=$_MKRD/$_PKG_NAME/pmw2-install.mkr

# test python3 version
cd "$_SRCD"
_PYV=$(python3 -V |awk '{print $2}')
if [[ $_PYV > "3.3.0" ]];then
	echo ".. Python Version is .. OK"
else
	echo "Python3 => 3.3.0 was Not Found"
	echo "Please ensure you have have Python verson 3.3.0 or"
	echo "later installed on your system before continuing"
	break
	clean_exit
fi

# Download Pmw-2.0.0
echo ".. downloading $_FILE from Sourceforge"
cd $_SRCD
wget -q -r --tries=5 $_URL -O $_FILE

# unpack and install Pmw2
echo ".. unpacking $_FILE"
cd $_SRCD
tar -xzvf $_FILE
cd $_SRCD/Pmw-2.0.0

# Run MD5SUM
if [[ -f $_SRCD/Pmw-2.0.0.tar.gz ]]; then
	_MD5B=$(md5sum $_SRCD/$_FILE |awk '{print $1}')
	echo ".. MD5A Checksum is: "$_MD5A
	echo ".. MD5B Checksum is: "$_MD5B
else
	clear
	echo
	echo "The Automated $_FILE Download .. FAILED"
	echo "In order to continue, you need to manually download"
	echo "$_FILE before continuing."
	echo
	echo "For Details, see $_LOGS/setup.log"
	echo
	echo "Actoiins to Take:"
	echo " [1] Download PMW:" $_URL
	echo " [2] Save to: $_SRCD"
	echo " [3] Re-Run setup.sh"
	echo
	echo "Setup will now exit."
	echo
	read -p "Press [Enter] to continue ..."
	clean_exit
fi

if [[ $_MD5B = $_MD5A ]]; then
	_MD5C=OK
echo ".. MD5SUM is ..." $_MD5C
	sleep 2
else
	echo "MD5A" $_MD5A
	echo "MD5B" $MD5B
	echo "Do No Match"
	echo "For Details, see $_LOG"
	echo
	echo "Actoiins to Take:"
	echo " [1] Download PMW:" $_URL
	echo " [2] Save to: $_SRCD"
	echo " [3] Re-Run setup.sh"
	echo
	echo "Setup will now exit."
	echo
	read -p "Press [Enter] to continue ..."
	clean_exit
fi

# we need sudo here to install system wide:
echo ".. installing $_PKG_NAME and setting uninstall marker"
mkdir -p $_MKRD/$_PKG_NAME
sudo python3 setup.py install --record $_INSTALL_MKR
wc -l < $_MKRD/$_PKG_NAME/$_PKG_NAME-install.mkr |awk '{print $1}' > $_FILE_COUNT_MKR

# change ownership to $USER after install
echo ".. changing ownership of Folders and File to $USER"
cd ..
sudo chown -R $USER:$USER ./Pmw-2.0.0
sudo chown $USER:$USER $_MKRD/$_PKG_NAME/pmw2-install.mkr

# reset sudo to ask for user PW if needed again
echo ".. changing back to normal user"
sudo -k

# verify Pmw instlled correctly
echo ".. verifying Pmw2 install"
pip3 list | tee -a > $_MKRD/$_PKG_NAME/pip3-list.mkr 2>&1
_PMWV=$(grep ^Pmw < $_MKRD/$_PKG_NAME/pip3-list.mkr |awk '{print $1}')

if [[ $_PMWV = "Pmw" ]];then
	echo "Pmw Installation Complete"
	rm $_MKRD/$_PKG_NAME/pip3-list.mkr
else
	echo
	echo "Pmw Installation Error"
	echo "There appears to have been an Pmw install problem."
	echo "Please check the build log for details:"
	echo
	echo "Location: $_LOGS/$_PKG_NAME-setup.log"
	echo 
	read -p "Press [Enter] to continue ..."
	clean_exit
fi
}
