# Makefile for Linux
# Re-direct stdout and stderr:		bash
#								make >& junk
#
# Prerequisites: Python 3.x, numpy-1.8.1+, PIL, Portaudio, Samplerate, FFTW
#                Python 2.x and A2X for Manpages
#                Ruby and Asciidoctor for User Guide

# Program Infomation
PROGRAM		:=	@PROGRAM@
VERSION		:=	@VERSION@
COPYRIGHT	:=	@COPYRIGHT@
BUGS		:=	@BUGS@
WEB         :=	@WEB@

# System Information
OS			:=	@OS@
CPU			:=	@CPU@

# General Use Tools
AR			:=	@AR@
CP			:=	@CP@
LN			:=	@LN@
MV			:=	@MV@
RM			:=	@RM@
CHOWN		:=	@CHOWN@
CHMOD		:=	@CHMOD@
SHELL		:=	@SHELL@
MKDIR		:=	@MKDIR@ -p
INSTALL		:=	install

# Libs and FLags
LIBS		:=	@LIBS@
LIBDIR      +=	@LIBDIR@
CFLAGS		+=	@CFLAGS@
FFLAGS		+=	@FFLAGS@
LDFLAGS		+=	@LDFLAGS@
FCOPT		+=	@FCOPT@

DEFS		+=	@DEFS@
CFLAGS		+=	$(DEFS) -DBIGSYM=1 -DHAVE_STRUCT_TIMESPEC -fPIC

FC			=	@FC@
FCV			=	@FCV@
FC_LIB_PATH	+=	@FC_LIB_PATH@
LDFLAGS		+=	-L$(FC_LIB_PATH)

# Python Locations
PYTHON		?=	@PYTHON@
F2PY		?=	@F2PY@

# For Core Developers only. Not for package distribution. 
RSDTEST		:= @RSDTEST@

# ser Guide
BDOC		:=	@BDOC@
ASCIIDOCTOR	:=	@ASCIIDOCTOR@
SRCD		:=	$(shell exec pwd)
DOCPATH		:=	$(SRCD)/doc
DOCSRC		:=	$(SRCD)/doc/user_guide
DOCCONF		:=	$(SRCD)/doc/wsjt.conf
THEMEDIR	:=	$(SRCD)/doc/theme

# Manpages
BMANP		:=	@BMANP@
A2X			:=	@A2X@
ASCIIDOC	:=	@ASCIIDOC@
MANPSRC		:= $(wildcard manpages/*.1.txt)
BMANP		:=	@BMANP@

# Install paths
LOGNAME		:=	@LOGNAME@
HOMEDIR		:=	/home/@LOGNAME@/.local/share/$(PROGRAM)
LOGGRP		:=	$(shell groups @LOGNAME@ | cut -d ' ' -f 3)
PREFIX		:=	@PREFIX@
BINDIR		:=	@BINDIR@
DOCDIR		:=	@DOCDIR@
MANDIR		:=	@MANDIR@
SHARED		:=	@SHARED@
WSJTLIB		:=	@WSJTLIB@

# Default Rules
%.o: %.c
	$(CC) $(PORTAUDIO_INCLUDE) $(CFLAGS) $(CPPFLAGS) -c $<
%.o: %.f
	$(FC) $(PORTAUDIO_INCLUDE) $(FFLAGS) -c $<
%.o: %.F
	$(FC) $(PORTAUDIO_INCLUDE) $(FFLAGS) -c $<
%.o: %.f90
	$(FC) $(PORTAUDIO_INCLUDE) $(FFLAGS) -c $<
%.o: %.F90
	${FC} $(PORTAUDIO_INCLUDE) $(FFLAGS) -c $<

# WSJT targets
# TO-D): Add Manpage and userguide targets to the build.
all:	libjt.a WsjtMod/Audio.so jt65code jt4code manp docs rtest mkmsg

# Objects
OBJS1 =	a2d.o abc441.o alignmsg.o ana932.o analytic.o astro.o \
	avecho.o avemsg4.o avemsg65.o avemsg6m.o avesp2.o azdist.o \
	bzap.o chk441.o chkhist.o chkmsg.o coord.o db.o dcoord.o \
	decode1.o decode2.o decode3.o decode4.o decode65.o decode6m.o \
	decode_rs.o decodems.o deep4.o deep65.o deg2grid.o demod64a.o \
	detect.o dot.o dtrim.o echogen.o encode232.o encode4.o \
	encode65.o encode_rs.o entail.o extract.o extract4.o fano.o \
	fano232.o fil651.o fil652.o fil653.o fivehz.o flat1.o flat2.o \
	flatten.o foldms.o four2a.o fthread.o ftpeak65.o gen4.o \
	gen441.o gen65.o gen6m.o gencw.o gencwid.o geniscat.o genmet.o \
	genms.o gentone.o geocentric.o geodist.o get_fname.o getmet4.o \
	getpfx1.o getpfx2.o getsnr.o gran.o graycode.o grid2deg.o \
	grid2k.o hipass.o horizspec.o hscroll.o igray.o indexx.o \
	init_rs.o interleave4.o interleave63.o iscat.o jtaudio.o jtms.o \
	k2grid.o lenms.o limit.o longx.o lpf1.o makepings.o match.o \
	moon2.o moondop.o morse.o msdf.o msgtype.o mtdecode.o nchar.o \
	nhash.o packcall.o packgrid.o packmsg.o packpfx.o packtext.o \
	pctile.o peakup.o pfxdump.o ping.o pix2d.o pix2d65.o ps.o \
	ps4.o ptt_unix.o resample.o rfile.o rfile2.o s2shape.o savedata.o \
	set.o setup65.o setupms.o short65.o slope.o smo.o smooth.o \
	sort.o spec2d.o spec2d65.o spec441.o spread.o ssort.o \
	start_threads.o stdecode.o sun.o symsync65.o sync.o sync4.o \
	sync65.o syncf0.o syncf1.o synciscat.o syncms.o synct.o \
	tab.o thnix.o tm2.o tmoonsub.o toxyz.o tweak1.o tweak2.o \
	unpackcall.o unpackgrid.o unpackmsg.o unpackpfx.o unpacktext.o \
	usleep.o wrapkarn.o wsjt1.o wsjt4.o wsjt65.o wsjtgen.o xcor.o \
	xcor4.o xfft.o xfft2.o sfrsd2.o

# Bbuild libjt.a library
libjt.a: $(OBJS1)
	@echo
	@echo Build libjt.a
	@echo --------------------
	ar cr libjt.a $(OBJS1)
	ranlib libjt.a

# Build jt65code binary
OBJS2 = jt65code.o 
jt65code: $(OBJS2) libjt.a
	@echo
	@echo Build jt65code
	@echo --------------------
	$(FC) -o jt65code $(OBJS2) libjt.a -lgfortran

# Build jt4code binary
OBJS3 = jt4code.o
jt4code: $(OBJS3)
	@echo
	@echo Build jt4code
	@echo --------------------
	$(FC) -o jt4code $(OBJS3) libjt.a

# SRCS for Audio.so
F2PYSRCS = ftn_init.f90 ftn_quit.f90 audio_init.f90 spec.f90 getfile.f90 azdist0.f90 astro0.f90 chkt0.f90

# Build Audio.so libary
WsjtMod/Audio.so: libjt.a ${F2PYSRCS} 
	@echo
	@echo RUN F2PY Audio.so
	@echo -----------------
	$(F2PY) -c --quiet --fcompiler=$(FCV) --f77exec=$(FC) --f90exec=$(FC) \
	--opt="$(FCOPT)" $(PORTAUDIO_LIBDIR) $(LDFLAGS) $(LIBS) libjt.a -m Audio $(F2PYSRCS)
	$(MV) Audio*.so WsjtMod/Audio.so

# Build user guide
docs:
ifeq ($(BDOC),Yes)
	@echo
	@echo Build User Guide
	@echo --------------------
	@ASCIIDOCTOR@ -a data-uri \
	-a toc=left \
	-a max-width=1024px \
	--out-file=$(DOCPATH)/wsjt-main-$(VERSION).html $(DOCPATH)/user_guide/wsjt-main.adoc
	@echo
endif

# Build manpages
manp:
ifeq ($(BMANP),Yes)
	@echo
	@echo Build Manpages
	@echo --------------------
	@for f in $(MANPSRC) ; do \
	echo "$$f" ; \
	$(A2X) --doctype manpage --format manpage --no-xmllint $$f ; \
	done
endif

# Build rsdtest tools, disabled by deault
rtest:
ifeq ($(RSDTEST),Yes)
	@echo
	@echo Generating rdtest tools
	@echo -----------------------
	@(cd rsdtest/ ; make -f Makefile.linux > /dev/null 2>&1)
	@echo " Finished RSD tools"
	@echo
endif

# make summary message
mkmsg:
	@echo ''
	@echo '---------------------------------------------'
	@echo "$(PROGRAM) Make Summary"
	@echo '---------------------------------------------'
	@echo ''
	@echo "Package ..........: $(PROGRAM) $(VERSION)"
	@echo " Install prefix ..: $(PREFIX)"
ifeq ($(BDOC),Yes)
	@echo " With HTML Docs ..: $(BDOC)"
endif
ifeq ($(BMANP),Yes)
	@echo " With Manpages ...: $(BMANP)"
endif
ifeq ($(RSDTEST),Yes)
	@echo " With RSD Tools ..: $(RSDTEST)"
endif
	@echo ''
	@echo 'INSTALL'
	@echo ' System Install ..: sudo make install'
	@echo ''

# Install WSJT
install:
	@echo
	@echo INSTALLING $(PROGRAM) $(VERSION)
	@echo ----------------------------
	@$(MKDIR) $(DESTDIR)$(BINDIR)
	@$(MKDIR) $(DESTDIR)$(DOCDIR)
	@$(MKDIR) $(DESTDIR)$(MANDIR)
	@$(MKDIR) $(DESTDIR)$(WSJTLIB)
	@$(MKDIR) $(DESTDIR)$(WSJTLIB)/WsjtMod
	@$(MKDIR) $(DESTDIR)$(DOCDIR)/RxWav/Samples
	@$(MKDIR) $(DESTDIR)$(SHARED)
	@$(MKDIR) ${DESTDIR}$(SHARED)/applications
	@$(MKDIR) ${DESTDIR}$(SHARED)/pixmaps
	@echo "..Installing Binaries and Scripts"
	@$(INSTALL) -m 755 wsjt jt65code jt4code $(DESTDIR)$(BINDIR)/
	@$(INSTALL) -m 644 wsjt.desktop ${DESTDIR}$(SHARED)/applications
	@$(INSTALL) -m 644 wsjt.xpm ${DESTDIR}$(SHARED)/pixmaps/
	@echo "..Installing Python3 Files"
	@$(INSTALL) -m 755 wsjt.py Pmw* $(DESTDIR)$(SHARED)/
	@$(INSTALL) -m 755 WsjtMod/{*.py,Audio.so} $(DESTDIR)$(WSJTLIB)/WsjtMod
	@echo "..Installing Misc Documents and Wav Files"
	@$(INSTALL) -m 644 CALL3.TXT wsjtrc $(DESTDIR)$(SHARED)
	@$(INSTALL) -m 644 RxWav/Samples/*.wav $(DESTDIR)$(DOCDIR)/RxWav/Samples
ifeq ($(BMANP),Yes)
	@echo "..Installing Manpages"
	@$(INSTALL) -m 644 manpages/{wsjt.1,jt65code.1} $(DESTDIR)$(MANDIR)
endif
ifeq ($(BDOC),Yes)
	@echo "..Installing User Guide"
	@$(INSTALL) -m 644 $(DOCPATH)/wsjt-main-@VERSION@.html $(DESTDIR)$(DOCDIR)/
endif
ifeq ($(RSDTEST),Yes)
	@echo "..Installing RSD Test Tools"
	@$(INSTALL) -m 755 -s rsdtest/{rsdtest,rsdtest2,rsdtest3} $(DESTDIR)$(BINDIR)
endif
	@echo
	@echo "TO RUN $(PROGRAM) $(VERSION):"
	@echo "  Type ..........: @PREFIX@/bin/wsjt"
	@echo "  Help Options ..: @PREFIX@/bin/wsjt -h"
	@echo ''

# uninstall WSJT
uninstall:
	@echo ''
	@echo "Uninstalling $(PROGRAM) $(VER)"
	@echo '----------------------------'
	@echo '..Removing binaries'
	@$(RM) -f $(DESTDIR)$(BINDIR)/{wsjt,jt65code,jt4code}
	@echo '..Removing shared files'
	@$(RM) -rf $(DESTDIR)$(SHARED)
	@$(RM) -f /home/@LOGNAME@/.local/share/applications/wsjt.desktop
	@$(RM) -f /home/@LOGNAME@/.local/share/icons/wsjt.xpm
	@echo '..Removing documents'
	@$(RM) -rf $(DESTDIR)$(DOCDIR)
	@echo '..Removing Manpages'
	@$(RM) -f $(DESTDIR)$(MANDIR)/{wsjt.1,jt65code.1}
	@echo '..Removing Module Files'
	@$(RM) -rf $(DESTDIR)$(WSJTLIB)
	@echo ''
	@echo "User generated files *do not* get removed"
	@echo ''

.PHONY : clean distclean
clean:
	$(RM) -f *.o *.pyc *.so *~ jt65code jt4code WsjtMod/*.pyc WsjtMod/*.pyc \
	WsjtMod/*.so  doc/wsjt.conf wsjt.desktop wsjt
	$(RM) -rf build/
ifeq ($(RSDTEST),Yes)
	(cd rsdtest/ ; make -f Makefile.linux clean)
endif
ifeq ($(BDOC),Yes)
	@RM@ -f doc/wsjt*.html
endif
ifeq ($(BMANP),Yes)
	@RM@ -f manpages/{wsjt.1,jt65code.1,jt4code.1}
endif

distclean: clean
	$(RM) -f ALL._TXT config.log config.status Makefile decoded.ave decoded.txt \
	prefixes.txt WSJT.INI azel.dat FFT_plans.txt RxWav/*.wav ALL.txt debug.txt
	$(RM) -rf autom4te.cache/
