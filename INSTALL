
 __       __   ______      _____  ________      __    __ 
|  \  _  |  \ /      \    |     \|        \    |  \  |  \
| $$ / \ | $$|  $$$$$$\    \$$$$$ \$$$$$$$$    | $$  | $$
| $$/  $\| $$| $$___\$$      | $$   | $$ ______ \$$\/  $$
| $$  $$$\ $$ \$$    \  __   | $$   | $$|      \ >$$  $$ 
| $$ $$\$$\$$ _\$$$$$$\|  \  | $$   | $$ \$$$$$$/  $$$$\ 
| $$$$  \$$$$|  \__| $$| $$__| $$   | $$       |  $$ \$$\
| $$$    \$$$ \$$    $$ \$$    $$   | $$       | $$  | $$
 \$$      \$$  \$$$$$$   \$$$$$$     \$$        \$$   \$$
                                                         
                                                         
                                                         
Installation
============

To build WSJT-X you need some prerequisite tools and libraries.

On Linux:

   build-essentials
   gcc-4.8.2 or clang-3.4
   g++-4.8.2 or clang-3.4
   gfortran-4.8.2
   CMake-2.8.9
   git
   svn

   Qt5.2.1  or newer,  qt5libmultimedia-dev, qt5libserialport-dev  and
   their  prerequisites   libfftw3-single-dev  and   its  prerequsites
   libusb-0.1-dev

Out of source builds are strongly recommended.

Create a  build directory somewhere  and cd  to it then  configure the
build as follows:

    $ mkdir <build-dir-path>
    $ cd <build-dir-path>
    $ cmake <source-dir-path>

By default  the build will install  the application in '/usr',  if you
want to install it somewhere else e.g. under your own account, you can
specify   the    install   prefix   as   a    configuration   variable
(CMAKE_INSTALL_PREFIX):

    $ cmake -D CMAKE_INSTALL_PREFIX=~/.local <source-dir-path>

You may build  a specific version by specifying the  tag in the WSJT-X
repository  e.g. wsjtx-1.4.0-rc2  by specifying  it as  a variable  to
configure:

    $ cmake -D WSJTX_TAG=tags/wsjtx-1.4.0-rc2 <source-dir-path>

Once configured the package can be built as follows:

    $ cmake --build <build-dir-path>

To install the application at the install prefix:

    $ cmake --build <build-dir-path> --target install


Making a Self-Contained Source Tarball
======================================

If you  are restricted  to local  files only on  your build  host, for
example  a build  server  with  restricted or  no  Internet access,  a
special source tarball can be  generated which contains all the source
files needed rather than fetching them from the VCS at build time.

In this mode you must augment  the source directory with the following
files:

1) src/hamlib.tgz      - GZIP compressed tarball of the hamlib sources,
2) src/wsjtx.tgz       - GZIP compressed tarball of the WSJT-X sources,
3) src/wsjtx-main.html - the WSJT-X User Guide.

You should not do this  augmentation manually, the build script should
be used in advance  on a host with Internet access  to make a suitable
source  tarball for  use in  a  local build.   To do  this you  simply
configure as  for a  normal build  selecting the  version you  wish to
build using  the WSJTX_TAG variable  as above, then make  the 'source'
target.  This  does a  build to  verify the  validity of  the upstream
sources then packages  the project source along with  the extra source
files above.   If this completes  successfully, a tarball that  can be
used for a local build is automatically built. For example:

    $ mkdir ~/build/wsjtx
    $ cd ~/build/wsjtx
    $ cmake -D WSJTX_TAG=tags/wsjtx-1.4.0 <source-dir-path>
    $ cmake --build . --target source

The  above commands,  if  successful,  will produce  'wsjtx-1.4.0.tgz'
which is  a source  tarball ready for  use on another  system to  do a
local build, for example:

    $ mkdir ~/build
    $ cd ~/build
    $ tar xzf wsjtx-1.4.0.tgz
    $ mkdir build
    $ cd build
    $ cmake ../wsjtx-1.4.0
    $ cmake --build .
    $ sudo cmake --build . --target install

If successful  this will install  the built application into  /usr, if
you  wish to  install  it  elsewhere, simply  set  the CMake  variable
CMAKE_INSTALL_PREFIX in the configure step above.


Basic Package Building
======================

If you  are a  package maintainer  you will  probably use  the install
target  above  along   with  tools  and  utilities   specific  to  the
distribution you  are packaging  for. Alternatively, this  package can
generate basic installation packages using  the CPack utility. You can
specify an alternate target that  generates a suitable package for the
system you run the build on.  The alternate target is 'package' and is
built as follows:

    $ cmake --build <build-dir-path> --target package

If the build  is successful the location of the  built package(s) will
be displayed at the end of the output.

Other targets available include:

     hamlib   		- just build the hamlib intermediate library

     build		- stop after building WSJT-X (default target)

     install		- stop after installing WSJT-X

     package_source	- build source packages in several formats
