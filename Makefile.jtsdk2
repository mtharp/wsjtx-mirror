# Makefile for Windows JTSDK v2.0.0: Python3 MinGW, gcc and gfortran

# Re-direct stdout and stderr:    cmd.exe
#                              make > junk 2>&1

# Application Information
NAME = PyFMT
VER = 0.1.0
OS = Win32
SDK = C:/JTSDK
SRCD = $(SDK)/src/fmt

# Tool & Chain
AR = $(SDK)/mingw32/bin/ar.exe
CC = $(SDK)/mingw32/bin/gcc.exe
FC = $(SDK)/mingw32/bin/gfortran.exe
RANLIB = $(SDK)/mingw32/bin/ranlib.exe
MAKE = $(SDK)/mingw32/bin/mingw32-make.exe

# Fortran libs
FLIBS = $(SDK)/mingw32/bin/libgfortran-3.dll $(SDK)/mingw32/bin/libquadmath-0.dll \
$(SDK)/mingw32/bin/libgcc_s_dw2-1.dll

# Misc Tools & Files & Paths
CP = $(SDK)/tools/bin/cp.exe
MV = $(SDK)/tools/bin/mv.exe
RM = $(SDK)/tools/bin/rm.exe
MKDIR = $(SDK)/tools/bin/mkdir.exe
TEST = $(SDK)tools\bin\test.EXE
ISCC = $(SDK)/inno5/ISCC.exe
ISS = $(SDK)/src/wspr/wspr4b.iss
MSVCR = $(SDK)/Python33/DLLs/msvcr100.dll
DOCPATH = $(SRCD)/doc
DOCSRC = $(SRCD)/doc/user_guide
DOCCONF = $(SRCD)/doc/pyfmt-jtsdk2.conf
THEMEDIR = $(SRCD)/doc/theme
ASCIIDOCTOR = $(SDK)/Ruby/bin/asciidoctor

# Output Paths
INSTALLDIR = $(SDK)/fmt/install
PACKAGEDIR = $(SDK)/fmt/package

# Python Paths
PYTHON3 = $(SDK)/Python33/python.exe
CXFR = $(PYTHON3) $(SDK)/Python33/Scripts/cxfreeze

# Rig Control
# Default is using the QT55 tool chain.
# To change at build time, use:
# mingw32-make QTVER=QTXX -f Makefile.jtsdk2
QTVER := QT55
ifeq ($(QTVER),QT52)
	RCTL = C:/JTSDK/hamlib3/bin/rigctl.exe
	RCTLDLL = C:/JTSDK/qt5/Tools/mingw48_32/bin/libwinpthread-1.dll
endif
ifeq ($(QTVER),QT55)
	RCTL = C:/JTSDK/hamlib3-qt55/bin/rigctl.exe
	RCTLDLL = C:/JTSDK/qt55/Tools/mingw492_32/bin/libwinpthread-1.dll
endif
ifeq ($(QTVER),QT56)
	RCTL = C:/JTSDK/hamlib3-qt56/bin/rigctl.exe
	RCTLDLL = C:/JTSDK/qt56/Tools/mingw492_32/bin/libwinpthread-1.dll
endif

# Compiler flags, libs and headers
FFLAGS = -O2 -fbounds-check -fno-second-underscore -Werror -Wno-conversion -Wno-character-truncation
CFLAGS = -I $(SRCD)/win32/include -DWIN32 -DWin32 -DBIGSYM -DHAVE_STRUCT_TIMESPEC
LIBDIR = $(SRCD)/win32/lib

# Default rules
%.o: %.c
	$(CC) $(CFLAGS) -c $<
%.o: %.f
	$(FC) $(FFLAGS) -c $<
%.o: %.F
	$(FC) $(FFLAGS) -c $<
%.o: %.f90
	$(FC) $(FFLAGS) -c $<
%.o: %.F90
	$(FC) $(FFLAGS) -c $<

# Build Targets
all:	libfmt.a fmtest.exe fmtave.exe fcal.exe fmeasure.exe docs

# Build OBJ3 for libfmt.a
OBJS1 = audiodev.o db.o fil1.o four2a.o padevsub.o peakup.o sound.o 

# Build the library libfmt.a
libfmt.a: $(OBJS1) acom1.f90 acom2.f90
	@echo.
	@echo  Compiling libfmt.a
	@echo ------------------------------
	$(AR) cr libfmt.a $(OBJS1)
	$(RANLIB) libfmt.a

# Build fmtest.exe
fmtest.exe: fmtest.f90 libfmt.a
	@echo.
	@echo  Compiling FMTest.exe
	@echo ------------------------------
	$(FC) $(FFLAGS) -o fmtest.exe fmtest.f90 $(OBJS1) libfmt.a $(LIBDIR)/libportaudio.a \
	$(LIBDIR)/libwinmm.a $(LIBDIR)/libfftw3f_win.a $(LIBDIR)/libpthreadGC2.a

# Build fmtave.exe
fmtave.exe: fmtave.f90
	@echo.
	@echo  Compiling FMTave.exe
	@echo ------------------------------
	$(FC) $(FFLAGS) -o fmtave.exe fmtave.f90

# Build fcal.exe
fcal.exe: fcal.f90
	@echo.
	@echo  Compiling Fcal
	@echo ------------------------------
	$(FC) $(FFLAGS) -o fcal.exe fcal.f90

# Build fmeasure.exe
fmeasure.exe: fmeasure.f90
	@echo.
	@echo  Compiling Fmeasure
	@echo ------------------------------
	$(FC) $(FFLAGS) -o fmeasure.exe fmeasure.f90

docs:
	@echo.
	@echo  RUN Asciidoctor
	@echo ------------------------------
	@echo Building wspr-main-$(VER).html
	$(ASCIIDOCTOR) -a data-uri -a toc2=left -a max-width=1024px \
	--out-file=$(DOCPATH)/pyfmt-main-$(VER).html $(DOCSRC)/pyfmt-main.adoc
	@echo.
	@echo Finished
	@echo Doc location: $(DOCPATH)/pyfmt-main-$(VER).html

# Run CX_Freeze to install WSPR to $(INSTALLDIR)
# CX_Freeze creates the $(INSTALLDIR) if not present.
install: all
	@echo.
	@echo  RUN CX_FREEZE
	@echo --------------------------------------
	$(CXFR) \
	--silent \
	--icon=win32/data/pyfmt.ico \
	--include-path=. modfmt/fmtmain.py \
	--target-dir=$(INSTALLDIR)\bin
	@echo.
	@echo  INSTALL ADDITIONAL FILES
	@echo --------------------------------------
	@$(RM) -rf $(INSTALLDIR)/bin/tcl/tzdata
	@$(RM) -rf $(INSTALLDIR)/bin/tk/demos
	@$(MKDIR) $(INSTALLDIR)/doc
	$(CP) -u fcal.exe fmeasure.exe fmtest.exe fmtave.exe $(INSTALLDIR)
	$(CP) -u data/hamlib_rig_numbers $(INSTALLDIR)/bin
	$(CP) -u win32/data/pyfmtrc.win $(INSTALLDIR)/bin
	$(CP) -u win32/data/gocal.bat $(INSTALLDIR)
	$(CP) -u $(DOCPATH)/pyfmt-main-$(VER).html $(INSTALLDIR)/doc/
	$(CP) -u $(FLIBS) $(MSVCR) $(INSTALLDIR)/bin
	$(CP) -u $(RCTL) $(INSTALLDIR)/bin/
	$(CP) -u $(RCTLDLL) $(INSTALLDIR)/bin/
	@echo.
	@echo  INSTALL SUMMARY
	@echo --------------------------------------
	@echo  Package ......: $(NAME)
	@echo  Version ......: $(VER)
	@echo  Source .......: $(SRCD)
	@echo  Install Dir ..: $(INSTALLDIR)
	@echo  Rig Control ..: $(RCTL)
	
# /O = Installer output directory
# /F = Win32 output file name
# /cc = Compiler command
# $(ISS) = .iss file name
# The other vars are from the top of the Makefile.
# Output: $(SDK)\pyfmt\package\pyfmt-4.0-Win32.exe
# Optional: Super Quiet, with errors only, add "/Q[p]" before /O
package:
	@echo.
	@echo  BUILDING INSTALLER with InnoSetup
	@echo --------------------------------------
	@$(RM) -rf $(PACKAGEDIR)
	@$(MKDIR) -p $(PACKAGEDIR)
	$(ISCC) "/Q[p]" /O"$(PACKAGEDIR)" /F"$(NAME)-$(VER)-$(OS)" /cc $(ISS)
	@echo.
	@echo  WIN32 PACKAGE SUMMARY
	@echo --------------------------------------
	@echo  Package ..........: $(NAME)
	@echo  Version ..........: $(VER)
	@echo  Source ...........: $(SRCD)
	@echo  Install Dir ......: $(INSTALLDIR)
	@echo  Win32 Installer ..: $(PACKAGEDIR)/$(NAME)-$(VER)-$(OS).exe
	@echo.

.PHONY : list-targets clean distclean 
list-targets:
	@cls
	@echo --------------------------------------
	@echo  $(NAME) Build Targets
	@echo --------------------------------------
	@echo. 
	@echo  libfmt.a  .....  WPSR Library
	@echo  fmtest.exe ..... FMTest App
	@echo  fmtave.exe ..... Ave app for FMTest
	@echo  fcal.exe ....... Cal app for FMTest
	@echo  fmeasure.exe ... Measure app for FMTest
	@echo. install ........ Build and Install pyfmt
	@echo  package ........ Build Win32 Installer
	@echo  clean .......... Clean SRC directory
	@echo  distclean ...... Clean SRC, Install & Package Dirs
	@echo. 
	@echo  At the prompt, type:
	@echo  mingw32-make -f Makefile.jtsdk2 ^<target-name^>
	@echo.

clean:
	$(RM) -rf ./*.o libfmt.a pyfmt.exe fmtest.exe fmtave.exe fcal.exe \
	fmeasure.exe pyfmtcode.exe pyfmt0.exe pyfmtMod/w.pyd $(DOCPATH)/pyfmt-main-$(VER).html

distclean: clean
	$(RM) -rf $(INSTALLDIR) $(PACKAGEDIR) $(SRCD)/JTSDK
