# Makefile for Windows JTSDK v2.0.0: Python2, Python3, F2PY, MinGW, gcc and gfortran

# Re-direct stdout and stderr:     cmd.exe
#                              make > junk 2>&1

# Application Information
NAME = WSJT
VER = 10.0
OS = Win32
SDK = C:/JTSDK

# Tool Chain
AR = $(SDK)/mingw32/bin/ar.exe
CC = $(SDK)/mingw32/bin/gcc.exe
FC = $(SDK)/mingw32/bin/gfortran.exe
RANLIB = $(SDK)/mingw32/bin/ranlib.exe

# Fortran libs
FLIBS = $(SDK)/mingw32/bin/libgfortran-3.dll $(SDK)/mingw32/bin/libquadmath-0.dll

# Misc Tools & Files & Folders
SRCD = $(SDK)/src/trunk
ISS = $(SRCD)/wsjt10b.iss
CP = $(SDK)/tools/bin/cp.exe
MV = $(SDK)/tools/bin/mv.exe
RM = $(SDK)/tools/bin/rm.exe
MKDIR = $(SDK)/tools/bin/mkdir.exe
ISCC = $(SDK)/inno5/ISCC.exe
MSVCR = $(SDK)/Python33/DLLs/msvcr100.dll
DOCPATH = $(SRCD)/doc
DOCSRC = $(SRCD)/doc/user_guide
DOCCONF = $(SRCD)/doc/wsjt-jtsdk2.conf
THEMEDIR = $(SRCD)/doc/theme
ASCIIDOC = $(SDK)/asciidoc/asciidoc.py

# Output Paths
INSTALLDIR = $(SDK)/wsjt/install
PACKAGEDIR = $(SDK)/wsjt/package

# Python Paths
PYTHON2 = $(SDK)/python27/python.exe
PYTHON3 = $(SDK)/Python33/python.exe
F2PY = $(PYTHON3) $(SDK)/Python33/Scripts/f2py.py
CXFR = $(PYTHON3) $(SDK)/Python33/Scripts/cxfreeze

# Compiler Flags
FFLAGS = -O2 -DWIN32 -DWin32 -fbounds-check -fno-second-underscore -Wall \
       -Wno-conversion -Wno-character-truncation
CFLAGS = -I. -DWIN32 -DWin32 -DBIGSYM -DHAVE_STRUCT_TIMESPEC

# Default rules
%.o: %.c
	$(CC) $(CFLAGS) -c $<
%.o: %.f
	$(FC) $(FFLAGS) -c $<
%.o: %.F
	$(FC) $(FFLAGS) -c $<
%.o: %.f90
	$(FC) $(FFLAGS) -c $<
%.o: %.F90
	$(FC) $(FFLAGS) -c $<

# Build Targets
all:	libjt.a jt65code.exe jt4code.exe WsjtMod/Audio.pyd user-guide

# Build OBJ1 for libjt.a
OBJS1 =	a2d.o abc441.o alignmsg.o ana932.o analytic.o astro.o \
	avecho.o avemsg4.o avemsg65.o avemsg6m.o avesp2.o azdist.o \
	bzap.o chk441.o chkhist.o chkmsg.o coord.o db.o dcoord.o \
	decode1.o decode2.o decode3.o decode4.o decode65.o decode6m.o \
	decode_rs.o decodems.o deep4.o deep65.o deg2grid.o demod64a.o \
	detect.o dot.o dtrim.o echogen.o encode232.o encode4.o \
	encode65.o encode_rs.o entail.o extract.o extract4.o fano.o \
	fano232.o fil651.o fil652.o fil653.o fivehz.o flat1.o flat2.o \
	flatten.o foldms.o four2a.o fthread.o ftpeak65.o gen4.o \
	gen441.o gen65.o gen6m.o gencw.o gencwid.o geniscat.o genmet.o \
	genms.o gentone.o geocentric.o geodist.o get_fname.o getmet4.o \
	getpfx1.o getpfx2.o getsnr.o gran.o graycode.o grid2deg.o \
	grid2k.o hipass.o horizspec.o hscroll.o igray.o indexx.o \
	init_rs.o interleave4.o interleave63.o iscat.o jtaudio.o jtms.o \
	k2grid.o lenms.o limit.o longx.o lpf1.o makepings.o match.o \
	moon2.o moondop.o morse.o msdf.o msgtype.o mtdecode.o nchar.o \
	nhash.o packcall.o packgrid.o packmsg.o packpfx.o packtext.o \
	pctile.o peakup.o pfxdump.o ping.o pix2d.o pix2d65.o ps.o \
	ps4.o ptt.o resample.o rfile.o rfile2.o s2shape.o savedata.o \
	set.o setup65.o setupms.o short65.o slope.o smo.o smooth.o \
	sort.o spec2d.o spec2d65.o spec441.o spread.o ssort.o \
	start_threads.o stdecode.o sun.o symsync65.o sync.o sync4.o \
	sync65.o syncf0.o syncf1.o synciscat.o syncms.o synct.o \
	tab.o thnix.o tm2.o tmoonsub.o toxyz.o tweak1.o tweak2.o \
	unpackcall.o unpackgrid.o unpackmsg.o unpackpfx.o unpacktext.o \
	usleep.o wrapkarn.o wsjt1.o wsjt4.o wsjt65.o wsjtgen.o xcor.o \
	xcor4.o xfft.o xfft2.o sfrsd2.o

# Build the library libjt.a
libjt.a: $(OBJS1)
	@echo.
	@echo  Compiling libjt.a
	@echo ------------------------------
	$(AR) cr libjt.a $(OBJS1)
	$(RANLIB) libjt.a

# Build jt65code.exe
OBJS2 = jt65code.o 
jt65code.exe: $(OBJS2) libjt.a
	@echo.
	@echo  Compiling jt65code.exe
	@echo ------------------------------
	$(FC) -o jt65code.exe $(OBJS2) libjt.a

# Build jt4code.exe
OBJS3 = jt4code.o 
jt4code.exe: $(OBJS3) libjt.a
	@echo.
	@echo  Compiling jt4code.exe
	@echo ------------------------------
	$(FC) -o jt4code.exe $(OBJS3) libjt.a

# Audio.pyd SRC
F2PYSRC = ftn_init.f90 ftn_quit.f90 audio_init.f90 spec.f90 \
	getfile.f90 azdist0.f90 astro0.f90 chkt0.f90

# Build Audio.pyd
WsjtMod/Audio.pyd: libjt.a $(F2PYSRC)
	@echo.
	@echo  RUN F2PY for Audio.pyd
	@echo ------------------------------
	$(F2PY) -c -I. \
	--quiet --fcompiler=gnu95 \
	--compiler=mingw32 --f77exec=gfortran \
	--f90exec=gfortran --opt="-cpp -fbounds-check -O2" \
	libjt.a libportaudio.a libfftw3f_win.a libsamplerate.a \
	libpthreadGC2.a -lwinmm -m Audio $(F2PYSRC)
	$(MV) Audio.pyd WsjtMod/Audio.pyd

user-guide:
	@echo.
	@echo  RUN AsciiDoc
	@echo ------------------------------
	@echo Building User Guide: wspr-main-$(VER).html
	$(PYTHON2) $(ASCIIDOC) -a data-uri -a toc2 -a max-width=1024px \
	--conf-file=$(DOCCONF) \
	--backend=xhtml11 \
	--theme wsjt \
	--out-file=$(DOCPATH)/wsjt-main-$(VER).html $(DOCSRC)/wsjt-main.adoc
	@echo.
	@echo Finished
	@echo Doc location: $(DOCPATH)/wsjt-main-$(VER).html

# Run CX_Freeze to install WSJT to $(INSTALLDIR)
# CX_Freeze creates the $(INSTALLDIR) if not present.
install:
	@echo.
	@echo  RUN CX_FREEZE
	@echo --------------------------------------
	$(CXFR) --silent --icon=wsjt.ico --include-path=. \
	--include-modules=Pmw wsjt.py --target-dir=$(INSTALLDIR)/bin
	@echo.
	@echo  INSTALL ADDITIONAL FILES
	@echo --------------------------------------
	@$(RM) -rf $(INSTALLDIR)/bin/tcl/tzdata
	@$(RM) -rf $(INSTALLDIR)/bin/tk/demos
	$(CP) -u CALL3.TXT kvasd.exe kvasd.dat wsjt.ico wsjt.bat $(INSTALLDIR)
	$(CP) -u $(DOCPATH)/wsjt-main-$(VER).html $(INSTALLDIR)	
	$(CP) -u wsjtrc wsjtrc.win $(INSTALLDIR)
	$(CP) -ur RxWav $(INSTALLDIR)
	$(CP) -u jt65code.exe jt4code.exe $(FLIBS) $(MSVCR) $(INSTALLDIR)/bin
	$(MKDIR) $(INSTALLDIR)/logbook
	$(CP) -ur Logbook/call3.csv Logbook/logbook.sql Logbook/logbook.db $(INSTALLDIR)/logbook
	@echo.
	@echo  INSTALL SUMMARY
	@echo --------------------------------------
	@echo  Package ......: $(NAME)
	@echo  Version ......: $(VER)
	@echo  Source .......: $(SRCD)
	@echo  Install Dir ..: $(INSTALLDIR)
	@echo  User Guide ...: $(INSTALLDIR)/wsjt-main-$(VER).html
	
# /O = Installer output directory
# /F = Win32 output file name
# /cc = Compiler command
# $(ISS) = .iss file name
# The other vars are from the top of the Makefile.
# Output: $(SDK)\wsjt\package\WSJT-10-Win32.exe
# Optional: Super Quiet, with errors only, add "/Q[p]" before /O
# ISCC creates $(PACKAGEDIR) if not present.
package:
	@echo.
	@echo  BUILDING INSTALLER with InnoSetup
	@echo --------------------------------------
	@$(RM) -rf $(PACKAGEDIR)
	@$(MKDIR) -p $(PACKAGEDIR)
	$(ISCC) "/Q[p]" /O"$(PACKAGEDIR)" /F"$(NAME)-$(VER)-$(OS)" /cc $(ISS)
	@echo.
	@echo  WIN32 PACKAGE SUMMARY
	@echo --------------------------------------
	@echo  Package ..........: $(NAME)
	@echo  Version ..........: $(VER)
	@echo  Source ...........: $(SRCD)
	@echo  Win32 Installer ..: $(PACKAGEDIR)/$(NAME)-$(VER)-$(OS).exe
	@echo.

.PHONY : list-targets clean distclean
list-targets:
	@cls
	@echo --------------------------------------
	@echo  $(NAME) Build Targets
	@echo --------------------------------------
	@echo. 
	@echo  libjt.a  ........... WSJT Library
	@echo  jt65code.exe ....... JT65 code test app
	@echo  jt4code.exe ........ JT4 code test app
	@echo  WsjtMod/Audio.pyd .. Audio Library for WSJT
	@echo  user-guide ......... Build WSJT User Guide
	@echo  install ............ Build and Install WSJT
	@echo  package ............ Build Win32 Installer
	@echo  clean .............. Clean SRC directory
	@echo  distclean .......... Clean SRC, Install & Package Dirs
	@echo. 
	@echo  At the prompt, type:
	@echo  make -f Makefile.jtsdk2 ^<target-name^>
	@echo.

clean:
	$(RM) -f $(DOCPATH)/wsjt-main-$(VER).html
	$(RM) -rf libjt.a jt65code.exe jt4code.exe WsjtMod/Audio.pyd ./*.o

distclean: clean
	$(RM) -rf $(INSTALLDIR) $(PACKAGEDIR) $(SRCD)/JTSDK
